Data Scientist Role Play: Profiling and Analyzing the Yelp Dataset Coursera Worksheet

This is a 2-part assignment. In the first part, you are asked a series of questions that will help you profile and understand the data just like a data scientist would. For this first part of the assignment, you will be assessed both on the correctness of your findings, as well as the code you used to arrive at your answer. You will be graded on how easy your code is to read, so remember to use proper formatting and comments where necessary.

In the second part of the assignment, you are asked to come up with your own inferences and analysis of the data for a particular research question you want to answer. You will be required to prepare the dataset for the analysis you choose to do. As with the first part, you will be graded, in part, on how easy your code is to read, so use proper formatting and comments to illustrate and communicate your intent as required.

For both parts of this assignment, use this "worksheet." It provides all the questions you are being asked, and your job will be to transfer your answers and SQL coding where indicated into this worksheet so that your peers can review your work. You should be able to use any Text Editor (Windows Notepad, Apple TextEdit, Notepad ++, Sublime Text, etc.) to copy and paste your answers. If you are going to use Word or some other page layout application, just be careful to make sure your answers and code are lined appropriately.
In this case, you may want to save as a PDF to ensure your formatting remains intact for you reviewer.



Part 1: Yelp Dataset Profiling and Understanding

1. Profile the data by finding the total number of records for each of the tables below:
	
	i. Attribute table = 10000
	ii. Business table = 10000
	iii. Category table = 10000
	iv. Checkin table = 10000
	v. elite_years table = 10000
	vi. friend table = 10000
	vii. hours table = 10000
	viii. photo table = 10000
	ix. review table = 10000 
	x. tip table = 10000
	xi. user table = 10000

Query:
SELECT  (
        SELECT COUNT(*)
        FROM   attribute
        ) AS Attribute,
        (
        SELECT COUNT(*)
        FROM   business
        ) AS Business,
        (
        SELECT COUNT(*)
        FROM   category
        ) AS Category,
        (
        SELECT COUNT(*)
        FROM   checkin
        ) AS Checkin,
        (
        SELECT COUNT(*)
        FROM   elite_years
        ) AS EliteYears,
        (
        SELECT COUNT(*)
        FROM   friend
        ) AS Friend,
        (
        SELECT COUNT(*)
        FROM   hours
        ) AS Hours,
        (
        SELECT COUNT(*)
        FROM   photo
        ) AS Photo,
        (
        SELECT COUNT(*)
        FROM   review
        ) AS Review,
        (
        SELECT COUNT(*)
        FROM tip
        ) AS Tip,
        (
        SELECT COUNT(*)
        FROM user
        ) AS User
	
SELECT COUNT(*) FROM 

2. Find the total distinct records by either the foreign key or primary key for each table. If two foreign keys are listed in the table, please specify which foreign key.

	i. Business = 10000 (id - Primary key)
	ii. Hours = 1562 (business_id - Foreign key)
	iii. Category = 2643 (business_id - Foreign key) 
	iv. Attribute = 1115 (business_id - Foreign key)
	v. Review = 10000 (id - Primary key)
	vi. Checkin = 493 (business_id - Foreign key)
	vii. Photo = 10000 (id - Primary key)
	viii. Tip = 537 (user id - Foreign key)
	ix. User = 10000 (id - Primary key)
	x. Friend = 11 (user_id - Foreign key)
	xi. Elite_years = 2780 (user_id - Foreign key)

Note: Primary Keys are denoted in the ER-Diagram with a yellow key icon.	

Query:
SELECT  (
        SELECT COUNT(DISTINCT(id))
        FROM   business
        ) AS Business,
        (
        SELECT COUNT(DISTINCT(business_id))
        FROM   hours
        ) AS Hours,
        (
        SELECT COUNT(DISTINCT(business_id))
        FROM   category
        ) AS Category,
        (
        SELECT COUNT(DISTINCT(business_id))
        FROM   attribute
        ) AS Attribute,
        (
        SELECT COUNT(DISTINCT(id))
        FROM   review
        ) AS Review,
        (
        SELECT COUNT(DISTINCT(business_id))
        FROM   checkin
        ) AS Checkin,
        (
        SELECT COUNT(DISTINCT(id))
        FROM   photo
        ) AS Photo,
        (
        SELECT COUNT(DISTINCT(user_id))
        FROM tip
        ) AS Tip,
        (
        SELECT COUNT(DISTINCT(id))
        FROM user
        ) AS User,
        (
        SELECT COUNT(DISTINCT(user_id))
        FROM   friend
        ) AS Friend,
        (
        SELECT COUNT(DISTINCT(user_id))
        FROM   elite_years
        ) AS EliteYears


3. Are there any columns with null values in the Users table? Indicate "yes," or "no."

	Answer: No
	
	
	SQL code used to arrive at answer:

SELECT *
FROM user
WHERE (id IS NULL 
        OR name IS NULL
	OR review_count IS NULL
	OR yelping_since IS NULL
	OR useful IS NULL
	OR funny IS NULL
	OR cool IS NULL
	OR fans IS NULL
	OR average_stars IS NULL
	OR compliment_hot IS NULL
	OR compliment_more IS NULL
	OR compliment_profile IS NULL
	OR compliment_cute IS NULL
	OR compliment_list IS NULL
	OR compliment_note IS NULL
	OR compliment_plain IS NULL
	OR compliment_cool IS NULL
	OR compliment_funny IS NULL
	OR compliment_writer IS NULL
	OR compliment_photos IS NULL);
	
	

	
4. For each table and column listed below, display the smallest (minimum), largest (maximum), and average (mean) value for the following fields:

	i. Table: Review, Column: Stars
	
		min: 1		
		max:	5	
		avg: 3.7082

	SELECT MIN(Stars) as Minimum, 
       		Max(Stars) as Maximum,
       		AVG(Stars) as Means
	FROM review  
		
	
	ii. Table: Business, Column: Stars
	
		min: 1		
		max:	5	
		avg: 3.6549

	SELECT MIN(Stars) as Minimum, 
       		Max(Stars) as Maximum,
       		AVG(Stars) as Means
	FROM business 
		
	
	iii. Table: Tip, Column: Likes
	
		min:	0	
		max:	2	
		avg: 0.0144

	SELECT MIN(Likes) as Minimum, 
       		Max(Likes) as Maximum,
       		AVG(Likes) as Means
	FROM tip    
		
	
	iv. Table: Checkin, Column: Count
	
		min: 1
		max: 53
		avg: 1.9414

	SELECT MIN(Count) as Minimum, 
       		Max(Count) as Maximum,
       		AVG(Count) as Means
	FROM checkin 
		
	
	v. Table: User, Column: Review_count
	
		min: 0
		max: 2000
		avg: 24.2995

	SELECT MIN(Review_count) as Minimum, 
       		Max(Review_count) as Maximum,
       		AVG(Review_count) as Means
	FROM user    
		


5. List the cities with the most reviews in descending order:

	SQL code used to arrive at answer:

	SELECT city, 
      		state, 
      		SUM(review_count) as Reviews
	FROM business
	GROUP BY city
	ORDER BY Reviews DESC
	
	
	Copy and Paste the Result Below:

		+-----------------+-------+---------+
		| city            | state | Reviews |
		+-----------------+-------+---------+
		| Las Vegas       | NV    |   82854 |
		| Phoenix         | AZ    |   34503 |
		| Toronto         | ON    |   24113 |
		| Scottsdale      | AZ    |   20614 |
		| Charlotte       | NC    |   12523 |
		| Henderson       | NV    |   10871 |
		| Tempe           | AZ    |   10504 |
		| Pittsburgh      | PA    |    9798 |
		| Montr�al        | QC    |    9448 |
		| Chandler        | AZ    |    8112 |
		| Mesa            | AZ    |    6875 |
		| Gilbert         | AZ    |    6380 |
		| Cleveland       | OH    |    5593 |
		| Madison         | WI    |    5265 |
		| Glendale        | AZ    |    4406 |
		| Mississauga     | ON    |    3814 |
		| Edinburgh       | EDH   |    2792 |
		| Peoria          | AZ    |    2624 |
		| North Las Vegas | NV    |    2438 |
		| Markham         | ON    |    2352 |
		| Champaign       | IL    |    2029 |
		| Stuttgart       | BW    |    1849 |
		| Surprise        | AZ    |    1520 |
		| Lakewood        | OH    |    1465 |
		| Goodyear        | AZ    |    1155 |
		+-----------------+-------+---------+

	
6. Find the distribution of star ratings to the business in the following cities:

i. Avon

SQL code used to arrive at answer:

SELECT stars, COUNT(stars)
FROM business
WHERE city = "Avon"
GROUP BY stars


Copy and Paste the Resulting Table Below (2 columns – star rating and count):

		+-------+--------------+
		| stars | COUNT(stars) |
		+-------+--------------+
		|   1.5 |            1 |
		|   2.5 |            2 |
		|   3.5 |            3 |
		|   4.0 |            2 |
		|   4.5 |            1 |
		|   5.0 |            1 |
		+-------+--------------+


ii. Beachwood

SQL code used to arrive at answer:

SELECT stars, COUNT(stars)
FROM business
WHERE city = "Beachwood"
GROUP BY stars


Copy and Paste the Resulting Table Below (2 columns – star rating and count):

		+-------+--------------+
		| stars | COUNT(stars) |
		+-------+--------------+
		|   2.0 |            1 |
		|   2.5 |            1 |
		|   3.0 |            2 |
		|   3.5 |            2 |
		|   4.0 |            1 |
		|   4.5 |            2 |
		|   5.0 |            5 |
		+-------+--------------+
		


7. Find the top 3 users based on their total number of reviews:
		
	SQL code used to arrive at answer:

	SELECT id, 
		name, 
		review_count 
	FROM user
	ORDER BY review_count DESC
	LIMIT 3
		
		
	Copy and Paste the Result Below:

		+------------------------+--------+--------------+
		| id                     | name   | review_count |
		+------------------------+--------+--------------+
		| -G7Zkl1wIWBBmD0KRy_sCw | Gerald |         2000 |
		| -3s52C4zL_DHRK0ULG6qtg | Sara   |         1629 |
		| -8lbUNlXVSoXqaRRiHiSNg | Yuri   |         1339 |
		+------------------------+--------+--------------+
		


8. Does posing more reviews correlate with more fans?

	Please explain your findings and interpretation of the results:

Yes, posing more reviews correlates with more fans.

According to the distrbution of fans an user can be classified with Low Popularity (<5 fans), Medium Popularity (5 - 100 fans) and High Popularity (>100). When we look at the average reviews made, we can see that low popularity users have made a few reviews meanwhile High popularity users have made a lot of reviews. We conclude that as the number of reviews increases, the popularity does too.



	SQL code used to arrive at answer:

	SELECT MIN(fans) AS MINIMUM, 
		MAX(fans) AS MAXIMUM, 
		AVG(fans) AS AVERAGE
	FROM user

		+---------+---------+---------+
		| MINIMUM | MAXIMUM | AVERAGE |
		+---------+---------+---------+
		|       0 |     503 |  1.4896 |
		+---------+---------+---------+

	SELECT Popularity, 
		AVG(review_count) as AVERAGE_REVIEWS
	FROM 
	(SELECT review_count, fans,
	CASE
		WHEN fans < 5 then 'Low Popularity'
		WHEN fans between 5 and 100 then 'Medium Popularity'
		WHEN fans > 100 then 'High popularity'
		ELSE '---'
	END AS 'Popularity'
	FROM user) b
	GROUP BY Popularity

		+-------------------+-----------------+
		| Popularity        | AVERAGE_REVIEWS |
		+-------------------+-----------------+
		| High popularity   |           891.5 |
		| Low Popularity    |   12.5626849894 |
		| Medium Popularity |   209.709923664 |
		+-------------------+-----------------+

	

	
9. Are there more reviews with the word "love" or with the word "hate" in them?

	Answer: Love

	
	SQL code used to arrive at answer:

	SELECT  (
        SELECT COUNT(*) 
        FROM review
        WHERE (text LIKE ('%love%') 
              OR text LIKE ('%love')
              OR text LIKE ('love%'))
        ) AS LoveCount,
        (
        SELECT COUNT(*) AS HateCount
        FROM review
        WHERE (text LIKE ('%hate%') 
              OR text LIKE ('%hate')
              OR text LIKE ('hate%'))
        ) AS HateCount

		+-----------+-----------+
		| LoveCount | HateCount |
		+-----------+-----------+
		|      1780 |       232 |
		+-----------+-----------+

		
	
10. Find the top 10 users with the most fans:

	SQL code used to arrive at answer:

	SELECT id, name, fans
	FROM user
	ORDER BY fans DESC
	LIMIT 10 
	
	
	Copy and Paste the Result Below:

		+------------------------+-----------+------+
		| id                     | name      | fans |
		+------------------------+-----------+------+
		| -9I98YbNQnLdAmcYfb324Q | Amy       |  503 |
		| -8EnCioUmDygAbsYZmTeRQ | Mimi      |  497 |
		| --2vR0DIsmQ6WfcSzKWigw | Harald    |  311 |
		| -G7Zkl1wIWBBmD0KRy_sCw | Gerald    |  253 |
		| -0IiMAZI2SsQ7VmyzJjokQ | Christine |  173 |
		| -g3XIcCb2b-BD0QBCcq2Sw | Lisa      |  159 |
		| -9bbDysuiWeo2VShFJJtcw | Cat       |  133 |
		| -FZBTkAZEXoP7CYvRV2ZwQ | William   |  126 |
		| -9da1xk7zgnnfO1uTVYGkA | Fran      |  124 |
		| -lh59ko3dxChBSZ9U7LfUw | Lissa     |  120 |
		+------------------------+-----------+------+

	
		

Part 2: Inferences and Analysis

City: Toronto
Category: Restaurants

1. Pick one city and category of your choice and group the businesses in that city or category by their overall star rating. Compare the businesses with 2-3 stars to the businesses with 4-5 stars and answer the following questions. Include your code.
	
i. Do the two groups you chose to analyze have a different distribution of hours?

Yes, they do. The 2-3 stars group tend to open and close earlier (11:00- 23:00) meanwhile the 4-5 stars group open from 16:00 - 2:00

ii. Do the two groups you chose to analyze have a different number of reviews?

Yes, the 2-3stars group have in average more reviews than the 4-5 stars group.         
         
iii. Are you able to infer anything from the location data provided between these two groups? Explain.

There is not a clear difference but for the 2-3 stars group the longitude is -79,3. On the other hand, the 4-5 stars group has a longitude of -79.45, probably due to a better location or these restaurants are closer to downtown.

SQL code used for analysis:

SELECT city,category, latitude, longitude, stars, review_count, hours,
  CASE
    WHEN stars>=2 and stars<=3 then '2-3 stars'
    WHEN stars>=4 and stars<=5 then '4-5 stars'
    ELSE 'OTHER'
  END AS 'ratings'
FROM
  (SELECT b.id,
        b.city,
      	c.category,
      	b.latitude,
      	b.longitude,
      	b.stars,
      	b.review_count
  FROM business b 
  LEFT JOIN category c ON b.id=c.business_id
  WHERE (c.category IS NOT NULL
         and b.city = 'Toronto'
         and c.category = 'Restaurants')) a
LEFT JOIN hours h
ON a.id = h.business_id
ORDER BY ratings 


		+---------+-------------+-----------------------+-----------+
		| city    | category    | hours                 | ratings   |
		+---------+-------------+-----------------------+-----------+
		| Toronto | Restaurants | Monday|10:30-21:00    | 2-3 stars |
		| Toronto | Restaurants | Tuesday|10:30-21:00   | 2-3 stars |
		| Toronto | Restaurants | Friday|10:30-21:00    | 2-3 stars |
		| Toronto | Restaurants | Wednesday|10:30-21:00 | 2-3 stars |
		| Toronto | Restaurants | Thursday|10:30-21:00  | 2-3 stars |
		| Toronto | Restaurants | Sunday|11:00-19:00    | 2-3 stars |
		| Toronto | Restaurants | Saturday|10:30-21:00  | 2-3 stars |
		| Toronto | Restaurants | Monday|11:00-23:00    | 2-3 stars |
		| Toronto | Restaurants | Tuesday|11:00-23:00   | 2-3 stars |
		| Toronto | Restaurants | Friday|11:00-23:00    | 2-3 stars |
		| Toronto | Restaurants | Wednesday|11:00-23:00 | 2-3 stars |
		| Toronto | Restaurants | Thursday|11:00-23:00  | 2-3 stars |
		| Toronto | Restaurants | Sunday|11:00-23:00    | 2-3 stars |
		| Toronto | Restaurants | Saturday|11:00-23:00  | 2-3 stars |
		| Toronto | Restaurants | Monday|9:00-23:00     | 2-3 stars |
		| Toronto | Restaurants | Tuesday|9:00-23:00    | 2-3 stars |
		| Toronto | Restaurants | Friday|9:00-4:00      | 2-3 stars |
		| Toronto | Restaurants | Wednesday|9:00-23:00  | 2-3 stars |
		| Toronto | Restaurants | Thursday|9:00-23:00   | 2-3 stars |
		| Toronto | Restaurants | Sunday|10:00-23:00    | 2-3 stars |
		| Toronto | Restaurants | Saturday|10:00-4:00   | 2-3 stars |
		| Toronto | Restaurants | None                  | 4-5 stars |
		| Toronto | Restaurants | Monday|16:00-2:00     | 4-5 stars |
		| Toronto | Restaurants | Tuesday|18:00-2:00    | 4-5 stars |
		| Toronto | Restaurants | Friday|18:00-2:00     | 4-5 stars |
		+---------+-------------+-----------------------+-----------+

** Some columns were removed for visualization purposes


		
		
2. Group business based on the ones that are open and the ones that are closed. What differences can you find between the ones that are still open and the ones that are closed? List at least two differences and the SQL code you used to arrive at your answer.
		
i. Difference 1:

The average star rating is higher for businesses that are open than businesses that are closed.       
         
ii. Difference 2:

The businesses that are open tend to have more reviews than ones that are closed on average      
         
         
SQL code used for analysis:

SELECT AVG(latitude), 
	AVG(longitude), 
	AVG(stars), 
	SUM(review_count), 
	is_open 
FROM business
GROUP BY is_open

		+---------------+-------------------+---------+
		|    AVG(stars) | SUM(review_count) | is_open |
		+---------------+-------------------+---------+
		| 3.52039473684 |             35261 |       0 |
		| 3.67900943396 |            269300 |       1 |
		+---------------+-------------------+---------+

** Some columns were removed for visualization purposes


	
	
3. For this last part of your analysis, you are going to choose the type of analysis you want to conduct on the Yelp dataset and are going to prepare the data for analysis.

	
i. Indicate the type of analysis you chose to do:

If I want to create a new business, what kind of business are better rated?        
         
ii. Write 1-2 brief paragraphs on the type of data you will need for your analysis and why you chose that data:

There are a lot of variables to take into account for solving this question. Nevertheless, we'll considerate the star rating given by the 'business' table and take a look to the highest values for a particular category (merge of business and category tables). Another important fact is that, one kind of business could have a five star rating but with only one review. For that reason we'll define a threshold for consideration, this threshold is business that have more than 100 reviews.

From the result, we can see that in general food related business are the best option. Particularly arabian, halal and mediterranean food.
                           
                  
iii. Output of your finished dataset:

		+------------------------+---------------+---------+
		| category               |       Ratings | Reviews |
		+------------------------+---------------+---------+
		| Arabian                |           5.0 |     267 |
		| Halal                  |           5.0 |     267 |
		| Mediterranean          |           5.0 |     267 |
		| Sandwiches             |           4.5 |     796 |
		| Ethnic Food            |           4.5 |     723 |
		| Farmers Market         |           4.5 |     723 |
		| Fruits & Veggies       |           4.5 |     723 |
		| Market Stalls          |           4.5 |     723 |
		| Meat Shops             |           4.5 |     723 |
		| Public Markets         |           4.5 |     723 |
		| Seafood Markets        |           4.5 |     723 |
		| Shopping               |           4.5 |     723 |
		| Specialty Food         |           4.5 |     723 |
		| Salad                  |           4.5 |     396 |
		| Architects             |           4.5 |     223 |
		| Architectural Tours    |           4.5 |     223 |
		| Hotels & Travel        |           4.5 |     223 |
		| Local Flavor           |           4.5 |     223 |
		| Museums                |           4.5 |     223 |
		| Professional Services  |           4.5 |     223 |
		| Tours                  |           4.5 |     223 |
		| Travel Services        |           4.5 |     223 |
		| American (Traditional) |          4.25 |     792 |
		| Food                   | 4.16666666667 |    1316 |
		| Asian Fusion           |           4.0 |     768 |
		+------------------------+---------------+---------+
         
         
iv. Provide the SQL code you used to create your final dataset:

SELECT category, AVG(stars) AS Ratings, SUM(review_count) AS Reviews
FROM
  (SELECT b.id,
          b.city,
        	c.category,
        	b.latitude,
        	b.longitude,
        	b.stars,
        	b.review_count
  FROM business b 
  LEFT JOIN category c ON b.id=c.business_id
  WHERE (c.category IS NOT NULL AND
          b.review_count > 100)) a
GROUP BY category
ORDER BY Ratings DESC, Reviews DESC
